// Урок 1. Установка и первая программа
node - запускаем node js из консоли
ctrl+C - выходим из node js
node app - запускаем приложение node, где app = app.js
.idea - папка со служебными настройками, которые создала программа (добавить запрет коммита для данной папки в .gitignore, так как при передаче проекта нельзя передавать эту папку)

// Урок 2. Дебаг программ на Node.js
1 этап. Настройка PhpStorm
В PhpStorm в правом верхнем углу кликаем на Add Configuration
Выбираем node.js
В поле "Working directory" прописываем директорию проекта
В поле "JavaScript file" прописываем необходимый файл
В правом верхнем углу нажимаем Create coniguration
При запуске кнопки run (зеленый треугольник) файл запускается в консоли

2 этап. Управление ходом Debugger
В файле ставим breakpoint (делаем клик на панели слева). Появляется красная точка. Теперь программа при запуске файла остановится на данной точке
В PhpStorm в правом верхнем углу кликаем на зеленого "жука" (запускаем режим Debugger)
Кнопка +. Debug переменных. Если вставим имя переменной, то получим результат
Кнопка Step Over. Шаг вперед.

// Урок 3. Передача параметров в Node.js
process - переменная, получающая данные, которые передаются из командной строки внутри программы

// Урок 4. Читаем папки и файлы. Создаем файлы.
fs - модуль для работы с файлами
reqiure('fs'); - подключение модуля
fs.readFile - считывает переданный файл, выполняется асинхронно, т.е после выполнения данной команды node продолжит выполнение остального кода
fs.readFileSync - считывает переданный файл, выполняется синхронно
fs.readdir - cчитывает папку, возвращает массив с именами файлов и папок внутри данной папки
path.extname(#имя файла#) - считывает расширение файла
fs.statSync - получить информацию о файле синхронно
fs.writeFile - запись данных в файл

// Урок 5. Читаем и пишем CSV и JSON файлы
JSON
Запись также через fs.writeFile. Расшрение файла - json. Второй параметр преобразуем в строку через JSON.stringify() для валидности
Чтение JSON просходит через подключение JSON-файла с помощью require('./task-5-file-1.json');

CSV. Чтение
В корне проекта (папка node) установим модуль csv-parser - npm i csv-parser
Подключим модуль через require('csv-parser'); Найдем документацию по модулю - https://www.npmjs.com/package/csv-parser
Через метод fs.createReadStream читаем CSV-файл

CSV. Запись
В корне проекта (папка node) установим модуль csv-writer - npm i csv-writer
Подключим модуль через require('csv-writer').createObjectCsvWriter; Найдем документацию по модулю - https://www.npmjs.com/package/csv-writer
Далее настраиваем модуль через const csvWriter, конфигурируем колонки и их названия (см. task-5.js)
Через метод fs.createReadStream записываем CSV-файл

// Урок 6. Получение GET и POST запросов
Подключаем модуль const http = require('http');
Подключаем модуль const url = require('url'); чтобы разобрать то, что пришло адресной строке
Создаем сервер - http.createServer; (см. task-6.js). Теперь сервер доступ по адресу http://localhost:3000/
GET
Создаем get-запрос http://localhost:3000/?test=4.
Ответ сервера - console.log(request);
Определим метод - console.log(request.method);
Получим GET-параметр - urlRequest.query.test

POST
Чтобы разобрать POST-запрос подключаем const { parse } = require('querystring');

// Урок 7. Подключение к базе данных MySQL
Установим модуль - npm install mysql
