// Урок 1. Установка и первая программа (см. task-1.js)
node - запускаем node js из консоли
ctrl+C - выходим из node js
node app - запускаем приложение node, где app = app.js
.idea - папка со служебными настройками, которые создала программа (добавить запрет коммита для данной папки в .gitignore, так как при передаче проекта нельзя передавать эту папку)
npm init -y - инициализировать проект с настройками по умолчанию
Флаг -D – это сокращение для –save-dev - установить зависимость только для разработки

// Урок 2. Дебаг программ на Node.js
1 этап. Настройка PhpStorm
В PhpStorm в правом верхнем углу кликаем на Add Configuration
Выбираем node.js
В поле "Working directory" прописываем директорию проекта
В поле "JavaScript file" прописываем необходимый файл
В правом верхнем углу нажимаем Create coniguration
При запуске кнопки run (зеленый треугольник) файл запускается в консоли

2 этап. Управление ходом Debugger
В файле ставим breakpoint (делаем клик на панели слева). Появляется красная точка. Теперь программа при запуске файла остановится на данной точке
В PhpStorm в правом верхнем углу кликаем на зеленого "жука" (запускаем режим Debugger)
Кнопка +. Debug переменных. Если вставим имя переменной, то получим результат
Кнопка Step Over. Шаг вперед.

// Урок 3. Передача параметров в Node.js (см. task-3.js)
process - переменная, получающая данные, которые передаются из командной строки внутри программы

// Урок 4. Читаем папки и файлы. Создаем файлы (см. task-4.js)
fs - модуль для работы с файлами
reqiure('fs'); - подключение модуля
fs.readFile - считывает переданный файл, выполняется асинхронно, т.е после выполнения данной команды node продолжит выполнение остального кода
fs.readFileSync - считывает переданный файл, выполняется синхронно
fs.readdir - cчитывает папку, возвращает массив с именами файлов и папок внутри данной папки
path.extname(#имя файла#) - считывает расширение файла
fs.statSync - получить информацию о файле синхронно
fs.writeFile - запись данных в файл

// Урок 5. Читаем и пишем CSV и JSON файлы (см. task-5.js)
JSON
Запись также через fs.writeFile. Расшрение файла - json. Второй параметр преобразуем в строку через JSON.stringify() для валидности
Чтение JSON просходит через подключение JSON-файла с помощью require('./task-5-file-1.json');

CSV. Чтение
В корне проекта (папка node) установим модуль csv-parser - npm i csv-parser
Подключим модуль через require('csv-parser'); Найдем документацию по модулю - https://www.npmjs.com/package/csv-parser
Через метод fs.createReadStream читаем CSV-файл

CSV. Запись
В корне проекта (папка node) установим модуль csv-writer - npm i csv-writer
Подключим модуль через require('csv-writer').createObjectCsvWriter; Найдем документацию по модулю - https://www.npmjs.com/package/csv-writer
Далее настраиваем модуль через const csvWriter, конфигурируем колонки и их названия (см. task-5.js)
Через метод fs.createReadStream записываем CSV-файл

// Урок 6. Получение GET и POST запросов (см. task-6.js)
Подключаем модуль const http = require('http');
Подключаем модуль const url = require('url'); чтобы разобрать то, что пришло адресной строке
Создаем сервер - http.createServer; (см. task-6.js). Теперь сервер доступ по адресу http://localhost:3000/
Пояснения для http.createServer: req (запрос), res (ответ)
GET
Создаем get-запрос http://localhost:3000/?test=4.
Ответ сервера - console.log(request);
Определим метод - console.log(request.method);
Получим GET-параметр - urlRequest.query.test

POST
Чтобы разобрать POST-запрос подключаем const { parse } = require('querystring');

// Урок 7. Подключение к базе данных MySQL (см. task-7.js)
Установим модуль - npm install mysql

// Урок 8. Роутинг (см. task-8.js)

// Урок 9. Модули (см. task-9.js)
Запускаем свой модуль - const lesson = require('./task-9-2');, где config = task-9-2.js
Если подключаем модуль без ./ (Например, require('task-9-2')), то node будет искать его в node_modules
npm init - запускает создание файла конфигурации пакета. Теперь в проекте появился файл package.json
package.json - файл с описанием проекта. Ключ dependencies - все зависимости
Теперь при передаче проекта достаточно запустить команду npm install - подтянутся зависимости в нужных версиях

// Урок 10. Express.js (см. task-10.js)
npm install express --save - установить и добавить в зависимости
npm install express - установить без зависимостей
npm install -D @types\express - подключаем интерфейсы и типы для работы с express (флаг -D указывает, что зависимость устанавливается только для разработки)
@types\express необходим для поддержки TypeScript. Типы в контексте TypeScript – это файлы (обычно с расширением .d.ts), которые используются для предоставления информации об API, в данном случае о платформе Express.
Ctrl + Shift + A, перейдем в Actions, введем nodejs - включим Toggle coding assistance
npm install -D nodemon - при сохранении кода позволяет автоматически перезагружать сервер
В package.json добавим команды:
"scripts": {
    "serve": "nodemon task-10.js",
    "start": "node task-10.js"
  },
Теперь доступны команды npm run serve, npm run start

Чтобы node понимала, что мы можем работать с импортом и экспортом, добавим "type": "module" в package.json
process.env.PORT - все, что находится в переменной окружения PORT, или 3000, если там ничего нет.
export PORT=4200 && node task-10 - через консоль проекта установим новый порт для прослушиваня

! + tab - в PhpStorm создан шаблон html-страницы

Генератор приложений Express
npm install express-generator -g - зайти в папку с проектами, установить на комп генератор приложений Express (-g - необязательно, флаг установки глобально)
express --view=pug node-express-generator - создаь приложение Express node-express-generator
npm install - после перейти в папку проекта (node-express-generator) и установить зависимости npm install
В package.json заменить "scripts": {"test": "echo \"Error: no test specified\" && exit 1"} на "scripts": {"start": "Server success"}
DEBUG=node-express-generator:* npm start - запустить приложение

// Урок 11. PostgreSQL
Скачать файл установки на Mac OS - https://www.enterprisedb.com/postgresql-tutorial-resources-training?cid=438
Установка PostgreSQL в Mac OS - https://www.enterprisedb.com/postgres-tutorials/installation-postgresql-mac-os
ps -ef | grep postgres - проверим, что база успешно установлена
